<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on My technical gists</title><link>https://dmachard.github.io/posts/</link><description>Recent content in Posts on My technical gists</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 28 Aug 2023 00:00:00 +0100</lastBuildDate><atom:link href="https://dmachard.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Secure your DNSTAP streams with TLS on CoreDNS</title><link>https://dmachard.github.io/posts/0053-coredns-dnstap-tls/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0053-coredns-dnstap-tls/</guid><description>This post explains how to enable TLS on outgoing dnstap streams with CoreDNS</description></item><item><title>Blacklist IP addresses with DNS UPDATE control and dynamic blocking duration with DNSdist</title><link>https://dmachard.github.io/posts/0052-dnsdist-ip-blacklisting/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0052-dnsdist-ip-blacklisting/</guid><description>A DNSdist configuration example to blacklist IP addresses with DNS UPDATE control and dynamic blocking duration.</description></item><item><title>Temporarily block domains with DNS notify with DNSdist</title><link>https://dmachard.github.io/posts/0051-dnsdist-blocklist-domains/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0051-dnsdist-blocklist-domains/</guid><description>A DNSdist configuration example to block or unblock domains temporarily and in a dynamic way with DNS notify.</description></item><item><title>Python Module to get your V4/V6 public IP from random providers</title><link>https://dmachard.github.io/posts/0050-python-publicaddr/</link><pubDate>Sat, 22 Jul 2023 01:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0050-python-publicaddr/</guid><description>Simple python module for getting your public IP V4 and V6 from several providers in random mode with also several protocols (DNS, HTTPS and STUN).</description></item><item><title>DNS tunneling protection with DNSdist</title><link>https://dmachard.github.io/posts/0048-dnsdist-dns-tunneling-protection/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0048-dnsdist-dns-tunneling-protection/</guid><description>A DNSdist configuration example to attempt to block DNS tunnelling.</description></item><item><title>Echo capability of ip address from domain name for development with DNSdist</title><link>https://dmachard.github.io/posts/0049-dnsdist-echoip/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0049-dnsdist-echoip/</guid><description>A DNSdist configuration example to map any IP address to a hostname for development purpose.</description></item><item><title>DNS Tunneling: tools overview</title><link>https://dmachard.github.io/posts/0047-dns-tunneling-overview/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0047-dns-tunneling-overview/</guid><description>This post is an overview of some dns tunnneling tools with installation procedure.</description></item><item><title>Dynamic blacklist with CDB database on DNSdist</title><link>https://dmachard.github.io/posts/0046-dnsdist-blacklist/</link><pubDate>Sat, 01 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0046-dnsdist-blacklist/</guid><description>A DNSdist configuration example to block big list of ads/malwares domains</description></item><item><title>Procedure Arduino IDE 1.8.19 for Ubuntu 22.04 and VScode</title><link>https://dmachard.github.io/posts/0045-arduino-vscode-init/</link><pubDate>Sun, 25 Sep 2022 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0045-arduino-vscode-init/</guid><description>Install arduino IDE # sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y # sudo snap install arduino arduino 1.8.19 from Merlijn Sebrechts installed # sudo usermod -a -G dialout &amp;lt;username&amp;gt; Configure Arduino File &amp;gt; Preference
Additional Boards Manager URLS: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Tools &amp;gt; Board &amp;gt; Boards Manager Search esp32 and install the extension
Tools &amp;gt; Board &amp;gt; ESP32 Arduino &amp;gt; DOIT ESP32 DEVKIT V1 Tools &amp;gt; Port &amp;gt; /dev/ttyUSB0
Run example File &amp;gt; Examples &amp;gt; 01.</description></item><item><title>PowerDns/auth: how to run pdns-auth in a Docker Container with custom configuration file</title><link>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</guid><description>The pdns-auth product is available in the official dockerhub registry of PowerDNS. This post details how to execute pdns-auth in docker container, custom configuration file with sqlite3 database. We assume you have a containers environnement already available.
Table of contents Custom config Deploy container Persistent database Docker compose Create zone Enable DNS Update Custom config local-address=0.0.0.0 local-port=53 launch=gsqlite3 gsqlite3-database=/var/lib/powerdns/pdns.sqlite3 dnsupdate=yes enable-lua-records=yes Deploy container Deploy the dnsdist image with the custom configuration</description></item><item><title>Collect DNSTAP stream and analysing DNS logs with Loki and Grafana</title><link>https://dmachard.github.io/posts/0044-dnscollector-grafana-loki/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0044-dnscollector-grafana-loki/</guid><description>Example to collect dnstap stream and analysing logs with Loki and Grafana</description></item><item><title>Monitor dns records with blackbox exporter and Prometheus</title><link>https://dmachard.github.io/posts/0043-blackbox-prometheus-dns/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0043-blackbox-prometheus-dns/</guid><description>Example to monitor DNS records with the blackbox exporter</description></item><item><title>Collect dnstap stream and follow dns answers with JSON format</title><link>https://dmachard.github.io/posts/0042-dnscollector-dnstap-json-answers/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0042-dnscollector-dnstap-json-answers/</guid><description>Collect dnstap stream and follow dns answers with JSON format Example to collect dnstap messages from dns servers and follow dns answers with JSON format.
Prequisites Install the dnscollector like described in the following guide.
Overview With this example, the collector waits incoming dnstap messages and redirect them to stdout in JSON format. JSON ouput can be used to get dns answers.
Configuration Download the config.yml file.
global: trace: verbose: false multiplexer: collectors: - name: tap dnstap: listen-ip: 0.</description></item><item><title>PowerDNS/Dnsdist: custom config with LUA</title><link>https://dmachard.github.io/posts/0041-dnsdist-lua-hostname/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0041-dnsdist-lua-hostname/</guid><description>This post gives some examples of LUA code to modify the behavior of your dnsdist
Table of contents Resolve hostname Get hostnmae Resolve hostname This exemple enable to make dns resolution at startup.
local f = assert(io.popen(&amp;#39;getent hosts &amp;lt;YOURDNSNAME&amp;gt; | cut -d &amp;#34; &amp;#34; -f 1&amp;#39;, &amp;#39;r&amp;#39;)) local dnscollector = f:read(&amp;#39;*a&amp;#39;) or &amp;#34;127.0.0.1&amp;#34; f:close() dnscollector = string.gsub(dnscollector, &amp;#34;\n$&amp;#34;, &amp;#34;&amp;#34;) fstl = newFrameStreamTcpLogger(dnscollector.. &amp;#34;:6000&amp;#34;) Get hostname Example to get the hostname of your machine and reuse-it in your dnsdist config</description></item><item><title>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS</title><link>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</guid><description>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS
Table of contents Prerequisites Overview Prerequisites Your ansible inventory and hosts file should be like this:
cat /etc/hosts
$ cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.1.221 docker-manager01 192.168.1.222 docker-worker01 192.168.1.223 docker-worker02 cat inventory.ini
[swarm_managers] docker-manager01 [swarm_workers] docker-worker01 docker-worker02 [swarm:children] swarm_managers swarm_workers [glusterfs] docker-manager01 docker-worker01 docker-worker02 Overview The cluster consists of 3 servers:
1 manager 2 workers A distributed file system Installation Run the following playbooks</description></item><item><title>Proxmox: Infra as code with terraform</title><link>https://dmachard.github.io/posts/0040-promox-terraform-create-vm/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0040-promox-terraform-create-vm/</guid><description>This post details how to create a virtual machine with Terraform on your proxmox infrastructure.
Table of contents Prerequisites Configure Proxmox as Code Cloud-init custom config Prerequisites Terraform installed on your system AlmaLinux cloudinit template on your promox system Configure Create a main.tf file and install the provider Telmate/promox
terraform { required_providers { proxmox = { source = &amp;#34;Telmate/proxmox&amp;#34; version = &amp;#34;2.9.0&amp;#34; } } } Run terraform init to install the provider.</description></item><item><title>Proxmox: building a cloud-init template with Almalinux8</title><link>https://dmachard.github.io/posts/0039-promox-cloudinit/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0039-promox-cloudinit/</guid><description>How to build a cloud-init template with Almalinux8
Table of contents Prerequisites Build Prerequisites Connect on your proxmox server and export the following variables
export CI_IMAGE=&amp;#34;AlmaLinux-8-GenericCloud-latest.x86_64.qcow2&amp;#34; export PM_STORAGE=&amp;#34;local-lvm&amp;#34; export VM_NAME=&amp;#34;almalinux-8-cloudinit-template&amp;#34; export VM_ID=1000 export VM_MEM=1024 export VM_OPTS=-&amp;#34;-net0 virtio,bridge=vmbr1&amp;#34; Build Download a pre-configured image from AlmaLinux’s official repositories.
wget https://repo.almalinux.org/almalinux/8/cloud/x86_64/images/$CI_IMAGE Create empty VM
qm create $VM_ID --name $VM_NAME --memory $VM_MEM $VM_OPTS Import the downloaded image to the VM
$ qm importdisk $VM_ID $CI_IMAGE $PM_STORAGE Assign the imported disk to scsi0</description></item><item><title>Proxmox: Passthrough Physical Disk to Virtual Machine</title><link>https://dmachard.github.io/posts/0038-promox-disk-passthrough/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0038-promox-disk-passthrough/</guid><description>How to attach physical disk to Virtual Machine on Promox
Table of contents Identify Disks Attach disks Setup on Windows Identify Disks Identify all disks installed on the Promox server.
$ ls /dev/disk/by-id/ | grep ata ata-ST3000VN000-1HJxxx_W6Axxxx ata-ST3000VN000-1HJxxx_W6Axxx ata-WDC_WD30EFRX-68xxx_WD-WCC1Txxxx ata-WDC_WD30EFRX-68xxx_WD-WCC1Txxxx ata-WDC_WD40EFRX-68xxx_WD-WCC7Kxxx Attach disks Get the ID of the VM and attach the disk to them.
qm set 100 -virtio2 /dev/disk/by-id/ata-ST3000VN000-1HJxxx_W6Axxxx qm set 100 -virtio3 /dev/disk/by-id/ata-WDC_WD30EFRX-68xxx_WD-WCC1Txxxx Setup on Windows Download the latest stable Windows VirtIO drivers from https://github.</description></item><item><title>How to manage Linux permissions for users, groups, and others</title><link>https://dmachard.github.io/posts/0036-linux-permissions-file/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0036-linux-permissions-file/</guid><description>How to manage Linux permissions for users, groups and others
Table of contents Access level Identity Chmod and Chown Access level Display file permission
$ ls -alrt total 1 -rwxrwxr--. 1 ansible automation 4 Nov 13 10:57 helloworld.txt r = read = 4 w = write = 2 x = execute = 1 Identity $ ll total 1 -rwxrwxr--. 1 ansible automation 4 Nov 13 10:57 helloworld.txt [ user = u ] [ group = g ] [ others = o ]</description></item><item><title>DnsCollector/dnstap: collect dnstap stream and backup-it to log files</title><link>https://dmachard.github.io/posts/0034-dnscollector-dnstap-to-log-files/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0034-dnscollector-dnstap-to-log-files/</guid><description>Example to collect dnstap messages from dns servers and backup-it in log files
Table of contents Prequisites Overview Configuration Logs Prequisites Install the dnscollector like described in the following guide.
Overview With this example, the collector waits incoming dnstap messages and save-it in log files in text format with rotation.
Configuration Download the config.yml file.
global: trace: verbose: true multiplexer: collectors: - name: &amp;#34;tap&amp;#34; dnstap: listen-ip: 0.0.0.0 listen-port: 6000 loggers: - name: file logfile: file-path: &amp;#34;/var/run/dnscollector/dnstap.</description></item><item><title>DnsCollector/dnstap: collect dnstap stream and get statistics usage</title><link>https://dmachard.github.io/posts/0035-dnscollector-grafana-prometheus/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0035-dnscollector-grafana-prometheus/</guid><description>Example to collect dnstap stream and get statistics usage
Table of contents Prequisites Overview Configuration Dashboard Prequisites Install the dnscollector like described in the following guide.
Overview With this example the collector waits incoming dnstap messages sent by your dns server, then you can watch statistics and metrics on your Grafana dashboard.
Configuration Download the config.yml file.
global: trace: verbose: true multiplexer: collectors: - name: tap_tls dnstap: listen-ip: 0.0.0.0 listen-port: 6000 tls-support: true cert-file: &amp;#34;/etc/dnscollector/dnscollector.</description></item><item><title>GPG: add an email to an existing key</title><link>https://dmachard.github.io/posts/0033-gpg-add-email/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0033-gpg-add-email/</guid><description>This post details how to add an email to an existing GPG key
Table of contents How to How to List your existing GPG keys.
gpg --list-secret-keys --keyid-format=long gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u /home/denis/.gnupg/pubring.kbx ------------------------------ sec rsa4096/123FFFFFFF456 2021-06-09 [SC] 1294...........BE886 uid [ultimate] John Doe &amp;lt;jdoe@gmail.com&amp;gt; ssb rsa4096/C07....BEA 2021-06-09 [E] In this example, the GPG key ID is 123FFFFFFF456</description></item><item><title>GPG: how to generate a key to sign commits with Git</title><link>https://dmachard.github.io/posts/0032-generate-gpg-git/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0032-generate-gpg-git/</guid><description>This post details how to generate a GPG key to sign commits with Git
Table of contents Generate a new GPG key Add a GPG key to Github Configure Git to use your GPG key Generate a new GPG key Generate a GPG key pair an enter user ID information.
gpg --full-generate-key List GPG keys.
gpg --list-secret-keys --keyid-format=long gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u /home/denis/.</description></item><item><title>Initial Ansible setup server</title><link>https://dmachard.github.io/posts/0014-initial-setup-ansible/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0014-initial-setup-ansible/</guid><description>This tutorial explains how to make the initial setup of ansible.
Table of contents Initial setup Run the playbook Sanity check Initial setup On this tutorial we assume you have at least python installed on all servers to manage and all your servers are available with a hostname in your dns and a root ssh access.
Create a specific automation user for your ansible srever
adduser automation passwd automation echo -e &amp;#39;automation\tALL=(ALL)\tNOPASSWD:\tALL&amp;#39; &amp;gt; /etc/sudoers.</description></item><item><title>How to install Ansible 4.7 on AlmaLinux 8.4 with pip</title><link>https://dmachard.github.io/posts/0013-ansible-almalinux-installation/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0013-ansible-almalinux-installation/</guid><description>This post will details how to install ansible on AlmaLinux 8.4.
Table of contents Install Python Install Ansible Install Python Install Python 3.9
dnf install epel-release -y dnf install python39 sshpass Install Ansible Install Ansible 4.7.0
Install some python dependencies
pip3 install --upgrade pip Finally install Ansible
python3 -m pip install ansible Checking version
# ansible --version ansible [core 2.11.6] config file = None configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;, &amp;#39;/usr/share/ansible/plugins/modules&amp;#39;] ansible python module location = /usr/local/lib/python3.</description></item><item><title>PowerDns/dnsdist: route incoming UDP/TCP DNS queries to a pool of DoH servers</title><link>https://dmachard.github.io/posts/0011-powerdns-dnsdist-doh-servers/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0011-powerdns-dnsdist-doh-servers/</guid><description>The goal of this tutorial is to send all your local DNS queries (udp/tcp) to a pool of DoH public resolvers with dnsdist load balancer. A dns cache is also enabled to optimize the traffic. We also assume you have a docker environement to follow this tutorial.
Table of contents Prepare configuration Deploy dnsdist container Test DNS resolution Jinja configuration template Prepare configuration Before to start, install some useful python tools to prepare the configuration</description></item><item><title>Run a squid proxy in container mode with custom configuration</title><link>https://dmachard.github.io/posts/0012-squid-run-docker/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0012-squid-run-docker/</guid><description>This tutorial explained how to deploy the following Squid 5 docker image and how to configure-it with a custom configuration (basic auth user).
Table of contents Setup user/password store Deploy the Squid container Test Basic configuration Setup user/password store yum install httpd-tools mkdir squid &amp;amp;&amp;amp; cd squid touch passwords htpasswd -c passwords [USERNAME] Replace [USERNAME] with your username. You will be prompted for entering the password. Enter and confirm it.</description></item><item><title>Contribution guide to open source project - fork and pull request</title><link>https://dmachard.github.io/posts/0023-fork-opensource-project-guide/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0023-fork-opensource-project-guide/</guid><description>Table of contents GitHub Fork &amp;amp; Pull Request GitHub Fork &amp;amp; Pull Request Fork the project you want to contribute
Clone your fork to your local machine
git clone git@github.com:USERNAME/FORKED-PROJECT.git Add &amp;lsquo;upstream&amp;rsquo; repo to list of remotes
git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git Verify the new remote named &amp;lsquo;upstream&amp;rsquo;
git remote -v Fetch from upstream remote
git fetch upstream View all branches, including those from upstream
git branch -va Checkout your master branch and merge upstream</description></item><item><title>PowerDns/dnsdist: how to send all your DNS queries to a pool of public resolvers</title><link>https://dmachard.github.io/posts/0009-powerdns-dnsdist-pool-resolvers/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0009-powerdns-dnsdist-pool-resolvers/</guid><description>In this very basic example, the goal is to send all your local DNS queries (udp/tcp) to a pool of public resolvers (without encryption).
Table of contents Basic configuration Basic configuration dnsdist is configured to make a load balancing (round robin) between all public resolvers configured. A dns cache is enabled to optimize the traffic. We assume you have dnsdist 1.6 minimum installed on your machine.
Configuration: /etc/dnsdist/dnsdist.conf
--------------------------------------------------- -- Dns services --------------------------------------------------- -- udp/tcp dns listening setLocal(&amp;#34;0.</description></item><item><title>Client en Python pour la banque Crédit Agricole</title><link>https://dmachard.github.io/posts/0008-creditagricole-client-python/</link><pubDate>Mon, 27 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0008-creditagricole-client-python/</guid><description>Le client Python est à destination des particuliers souhaitant récupérer ses opérations bancaires stockées par le Crédit Agricole.
Sommaire Introduction Installation Exemple Introduction Ce client Python permet de:
lister l&amp;rsquo;ensemble des comptes bancaires associés au compte récupérer le solde total récupérer la liste des opérations au format JSON Installation Le module python creditagricole-particuliers disponible sur pypi
pip install creditagricole-particuliers Exemple Code pour calculer le solde total de l&amp;rsquo;ensemble des comptes.</description></item><item><title>DnsCollector/dnstap: installation guide from binary</title><link>https://dmachard.github.io/posts/0007-dnscollector-install-binary/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0007-dnscollector-install-binary/</guid><description>This post details how to install the go-dnscollector tool with systemd.
Table of contents Installation Certificate Configuration Start Installation Install go-dnscollector from binary
Create some folders and user
adduser -M dnscollector mkdir /etc/dnscollector/ mkdir /var/run/dnscollector/ Export the following variable to get the version you want to download
export DNSCOLLECTOR_VERSION=v0.10.0 Download the binary
wget https://github.com/dmachard/go-dnscollector/releases/download/$(echo $DNSCOLLECTOR_VERSION)/go-dnscollector_$(echo $DNSCOLLECTOR_VERSION)_linux_amd64.tar.gz tar xvf go-dnscollector_$(echo $DNSCOLLECTOR_VERSION)_linux_amd64.tar.gz mv go-dnscollector /usr/bin/ mv config.yml /etc/dnscollector/config.yml.default Certificate Create a certificate. In this example we used a self-signed cert.</description></item><item><title>PowerDNS/dnsdist: how to configure TLS for outgoing dnstap stream using stunnel</title><link>https://dmachard.github.io/posts/0006-powerdns-dnsdist-dnstap-tls/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0006-powerdns-dnsdist-dnstap-tls/</guid><description>This post will detail how to wrap your outgoing dnstap stream with TLS using stunnel.
Table of contents Introduction Installation Configuration Systemd Introduction This tutorial assumes you have a working PowerDNS dnsdist server installed on a Centos/AlmaLinux with dnstap enabled. Also we will use the same user/group that dnsdist for stunnel. Any feedbacks will be appreciated to improve this tutorial.
Installation Install stunnel
yum install stunnel mkdir /var/run/stunnel chown dnsdist:dnsdist /var/run/stunnel Configuration Configure stunnel</description></item><item><title>PowerDNS/dnsdist: how to configure TLS for the API using stunnel</title><link>https://dmachard.github.io/posts/0005-powerdns-dnsdist-api-tls/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0005-powerdns-dnsdist-api-tls/</guid><description>This post will detail how to wrap your DnsDIST webserver/API and dnstap stream with TLS using stunnel.
Table of contents Purpose Installation Configuration Systemd Purpose This tutorial assumes you have a working PowerDNS dnsdist server installed on a Centos/AlmaLinux with webserver api. Also we will use the same user/group that dnsdist for stunnel. Any feedbacks will be appreciated to improve this tutorial.
Installation Install stunnel
yum install stunnel mkdir /var/run/stunnel chown dnsdist:dnsdist /var/run/stunnel Configuration Create a certificate.</description></item><item><title>Build PowerDNS server with docker</title><link>https://dmachard.github.io/posts/0022-powerdns-build-docker/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0022-powerdns-build-docker/</guid><description>Table of contents Developer guide Developer guide clone the source code from powerdns repositories
git clone https://github.com/PowerDNS/pdns.git git clone https://github.com/PowerDNS/pdns-builder.git cp -rf pdns-builder /pdns/builder build with docker
cd pdns/ sudo docker build . --file Dockerfile-auth --no-cache -t dmachard/pdns-auth-dev prepare pdns config
mkdir pdns-dev touch pdns.conf add the following content to your config file
enable-lua-records=yes dnsupdate=yes loglevel=9 webserver=yes webserver-address=0.0.0.0 webserver-allow-from=0.0.0.0/0 webserver-password=hello webserver-port=8081 run the new pdns
sudo docker run -d -p 5354:53/udp -p 5354:53/tcp --name=powerdns-dev --volume=$PWD/pdns.</description></item><item><title>PowerDNS/auth: how to manage DNS records with dynamic updates and terraform</title><link>https://dmachard.github.io/posts/0004-powerdns-dns-records-terraform/</link><pubDate>Sat, 22 May 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0004-powerdns-dns-records-terraform/</guid><description>This post details how to manage DNS records with dynamic updates and terraform with your authoritative server.
Table of contents Requirements Provider configuration Create DNS record Requirements Enable DNS update to your pdns.conf
dnsupdate=yes Create a Tsig key and set metadata to your zone to authorize DNSUPDATE and AXFR with TSIG authentication.
TSIG-ALLOW-DNSUPDATE TSIG-ALLOW-AXFR Provider configuration Create a main.tf file
Install the provider &amp;ldquo;dns&amp;rdquo; then, run terraform init.
terraform { required_providers { dns = { source = &amp;#34;hashicorp/dns&amp;#34; version = &amp;#34;3.</description></item><item><title>PowerDNS/auth: how to manage LUA records with terraform</title><link>https://dmachard.github.io/posts/0003-powerdns-lua-records-terraform/</link><pubDate>Sat, 22 May 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0003-powerdns-lua-records-terraform/</guid><description>This post details how to manage LUA records with dynamic updates and terraform with your authoritative server.
Table of contents Requirements Provider configuration Create custom LUA record Create pre-configured record Requirements Enable LUA records and DNS update to your pdns.conf
enable-lua-records=yes dnsupdate=yes Create a Tsig key and set metadata to your zone to authorize DNSUPDATE and AXFR with TSIG authentication.
TSIG-ALLOW-DNSUPDATE TSIG-ALLOW-AXFR Provider configuration The documentation of the provider powerdns-gslb is available in the terraform registry</description></item><item><title>Freshrss installation guide in container mode</title><link>https://dmachard.github.io/posts/0029-freshrss-install-guide/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0029-freshrss-install-guide/</guid><description>This post details how to run freshrss container
Create volumes docker volume create freshrss-data docker volume create freshrss-extensions Start freshrss docker run -d --restart unless-stopped --log-opt max-size=10m -v freshrss-data:/var/www/FreshRSS/data -v freshrss-extensions:/var/www/FreshRSS/extensions -e &amp;#39;CRON_MIN=4,34&amp;#39; -e TZ=Europe/Paris -p 8080:80 --name freshrss freshrss/freshrss</description></item><item><title>Prometheus installation guide</title><link>https://dmachard.github.io/posts/0028-prometheus-install-guide/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0028-prometheus-install-guide/</guid><description>This post details how to run prometheus container
Configuration cat /var/prometheus/prometheus.yml global: scrape_interval: 5s evaluation_interval: 5s scrape_configs: - job_name: &amp;#39;dnstap_receiver&amp;#39; basic_auth: username: admin password: changeme static_configs: - targets: [&amp;#39;10.0.0.249:8082&amp;#39;] Start prometheus docker run -u root -d -p 9090:9090 -v /var/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml --restart=always --name promserver01 prom/prometheus Test The web interface is available at http://yourip:9090</description></item><item><title>Authoritary PowerDNS installation on CentOS</title><link>https://dmachard.github.io/posts/0018-powerdns-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0018-powerdns-installation/</guid><description>PowerDNS authoritary servers installation on *CentOS 7 with sqlite database
Table of contents Installation Configuration Start server Manage configuration Cache purge entries DNS-UPDATE (RFC2136) GSLB feature Play with REST API Installation wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install epel-release yum --enablerepo=epel install luajit libsodium yum --enablerepo=epel install jq curl -o /etc/yum.repos.d/powerdns-auth-42.repo https://repo.powerdns.com/repo-files/centos-auth-42.repo yum install pdns pdns-tools pdns-backend-sqlite wget https://raw.githubusercontent.com/PowerDNS/pdns/master/modules/gsqlite3backend/schema.sqlite3.sql mkdir /var/db/pdns sqlite3 /var/db/pdns/pdns.db .read schema.sqlite3.sql .quit chown -R pdns:pdns /var/db/pdns Configuration vim /etc/pdns/pdns.</description></item><item><title>Dashboard Kibana pour le Credit Agricole</title><link>https://dmachard.github.io/posts/0021-dashboard-kibana-creditagricole/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0021-dashboard-kibana-creditagricole/</guid><description>Procédure de mise en oeuvre d&amp;rsquo;un dashboard Kibana permettant de suivre les opérations bancaires du crédit agricole.
Sommaire ConfGuideiguration Guide Déployer le fichier de configuration 00-creditagricole.conf logstash dans /etc/logstash/conf.d/
La section input utilise le plugin Exec pour exécuter les 2 scripts pythons une fois par jour. La section filter catégorise les différentes opérations avec le plugin Translate Enfin la section output injecte les opérations dans ElasticSearch logstash-creditagricole.conf
input { exec { type =&amp;gt; &amp;#34;pull_operations&amp;#34; command =&amp;gt; &amp;#34;python3 /home/pull_compte.</description></item><item><title>ELK installation on CentOS 7</title><link>https://dmachard.github.io/posts/0017-elk-installation-centos7/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0017-elk-installation-centos7/</guid><description>This post details how to install ELK (ElasticSearch, Logstash, Kibana and also Filebeat) on CentOS7.
Table of contents ElastiscSearch Logstash Kibana Filebeat ElasticSearch Installation rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch touch /etc/yum.repos.d/elasticsearch.repo vim /etc/yum.repos.d/elasticsearch.repo [elasticsearch] name=Elasticsearch repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=0 autorefresh=1 type=rpm-md yum install --enablerepo=elasticsearch elasticsearch systemctl daemon-reload systemctl enable elasticsearch.service Configuration vim /etc/elasticsearch/elasticsearch.yml network.host: 0.0.0.0 discovery.type: single-node Start the service systemctl start elasticsearch.service systemctl status elasticsearch.service Sanity check curl -X GET &amp;#34;localhost:9200&amp;#34; Logstash Installation with yum rpm --import https://artifacts.</description></item><item><title>PowerDNS/dnsdist: installation guide on CentOS 7</title><link>https://dmachard.github.io/posts/0020-powerdns-dnsdist-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0020-powerdns-dnsdist-installation/</guid><description>Table of contents Installation Configuration Start Firewalld configuration Installation Activate EPEL repo
yum install -y epel-release Install dependencies
yum install re2 net-snmp.x86_64 lmdb.x86_64 fstrm.x86_64 yum install protobuf.x86_64 tinycdb.x86_64 libsodium.x86_64 luajit.x86_64 openssl yum install gnutls tinycdb Download from the last version available https://repo.powerdns.com/centos/x86_64/7/
rpm -ivh dnsdist-1.4.0-1pdns.el7.rpm Configuration vim /etc/dnsdist/dnsdist.conf
-- bind on ip any setLocal(&amp;#39;0.0.0.0:53&amp;#39;) -- allow all IP access setACL({&amp;#39;0.0.0.0/0&amp;#39;}) -- start the web server on port 8080 webserver(&amp;#34;0.0.0.0:8080&amp;#34;, &amp;#34;key&amp;#34;) -- disable security feature polling setSecurityPollSuffix(&amp;#39;&amp;#39;) -- log incoming request addAction(AllRule(), LogAction(&amp;#34;/var/log/dnsdist.</description></item><item><title>Recursor PowerDNS installation on CentOS</title><link>https://dmachard.github.io/posts/0019-powerdns-rec-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0019-powerdns-rec-installation/</guid><description>PowerDNS recursor servers installation on CentOS.
Table of contents Installation Configuration Start server Cache purge entries Installation wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install epel-release yum --enablerepo=epel install luajit libsodium yum --enablerepo=epel install jq curl -o /etc/yum.repos.d/powerdns-rec-43.repo https://repo.powerdns.com/repo-files/centos-rec-43.repo yum install pdns-recursor pdns-tools Configuration Recursor server configuration
/etc/pdns-recursor/recursor.conf local-address=0.0.0.0 local-port=53 security-poll-suffix= forward-zones=home.local=127.0.0.1:5300 forward-zones-recurse=.=10.0.0.140:53 Start server systemctl enable pdns-recursor.service systemctl start pdns-recursor.service Cache purge entries rec_control wipe-cache test1.home.local</description></item><item><title>RedHat Family 8.x post installation</title><link>https://dmachard.github.io/posts/0016-redhat-post-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0016-redhat-post-installation/</guid><description>Post installation tunning for RedHat system family.
Table of contents keyboard hostname configuration date, time and timezone minimal network configuration install minimal tools keyboard localectl set-keymap fr To confirm your permanent keymap settings execute the localectl command without any arguments
hostname configuration hostnamectl set-hostname &amp;lt;mon nom de machine&amp;gt; date, time and timezone timedatectl set-timezone Europe/Paris timedatectl set-ntp yes/no timedatectl set-time [YYYY-MM-DD] timedatectl set-time [HH:MM:SS] timedatectl set-local-rtc yes/no minimal network configuration /etc/sysconfig/network-scripts/ifcfg-enp0s3 ONBOOT=yes BOOTPROTO=static PREFIX=24 IPADDR=192.</description></item><item><title>Ntpd: How to get statistics usage with ELK</title><link>https://dmachard.github.io/posts/0002-ntpd-logs-elk/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0002-ntpd-logs-elk/</guid><description>In this post, I will look at ntpd server to extract some ntp statitics.
Table of contents Activate ntpd logs peerstats documentation sysstats documentation Counting NTP clients Expected logs Export Logs to ELK Deploy Filebeat Configure Logstash Examples of dashboard on Kibana Activate ntpd logs Update the ntpd configuration
vim /etc/ntp.conf statsdir /var/log/ntpstats/ statistics peerstats sysstats filegen peerstats file peerstats.log type day enable filegen sysstats file sysstats.log type none enable Restart the daemon</description></item><item><title>How to enable and use the DNSTAP protocol on main dns servers</title><link>https://dmachard.github.io/posts/0001-dnstap-testing/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0001-dnstap-testing/</guid><description>This post details how to enable the dnstap feature in main open source dns servers.</description></item><item><title>Docker: debug sur container ne démarrant pas</title><link>https://dmachard.github.io/posts/0025-docker-container-debug-startup/</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0025-docker-container-debug-startup/</guid><description>Quelques commandes pour debugger un container qui ne démarre pas
How to Comment obtenir un shell dans un container?
docker exec -it &amp;lt;container_id&amp;gt; bash Comment debugguer sur container qui démarre pas? en modifiant le entrypoint par sh ce qui permet ensuite d&amp;rsquo;exécuter à la main le script ou programme posant problème.
docker run -it --name=&amp;lt;moncontainer&amp;gt; --entrypoint=sh &amp;lt;container_img&amp;gt; Comment afficher les logs d&amp;rsquo;un container?
docker logs --follow &amp;lt;container_id&amp;gt;</description></item><item><title>Exemple de développement d'une API REST avec pycnic</title><link>https://dmachard.github.io/posts/0031-pycnic-api-python/</link><pubDate>Sun, 03 Mar 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0031-pycnic-api-python/</guid><description>Exemple de développement d&amp;rsquo;une API avec la librairie Python pycnic
Installation de la librarie
pip install pycnic Exemple simple d&amp;rsquo;une API serveur:
from pycnic.core import WSGI, Handler from pycnic.errors import HTTP_401, HTTP_400, HTTP_500, HTTP_403, HTTP_404 from wsgiref.simple_server import make_server, WSGIServer from SocketServer import ThreadingMixIn class HandlerCors(Handler): def options(self): return {} class HelloWorld(HandlerCors): def post(self): return { &amp;#34;msg&amp;#34;: &amp;#34;success&amp;#34; } class app(WSGI): headers = [ (&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;), (&amp;#34;Access-Control-Allow-Method&amp;#34;, &amp;#34;*&amp;#34;), (&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;content-type, authorization&amp;#34;), ] routes = [ (&amp;#39;/helloworld&amp;#39;, HelloWorld()) ] class ThreadingWSGIServer(ThreadingMixIn, WSGIServer): daemon_threads = True class Server: def __init__(self, wsgi_app, listen=&amp;#39;127.</description></item><item><title>Installation d'un cluster docker swarm</title><link>https://dmachard.github.io/posts/0030-docker-swarm-installation/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0030-docker-swarm-installation/</guid><description>Procédure pour installer un clusteur docker swarm sur 3 machines.
En prerequis, installer docker-ce sur l&amp;rsquo;ensemble des machines, le port tcp/2377 doit être ouvert.
sur le manager
docker swarm init --advertise-addr IP_MANAGER sur le worker
docker swarm join --token SWMTKN-1-1xgbk6rfab....k8048s IP_MANAGER:2377 sur manager ou worker
docker info sur un manager
docker node ls</description></item><item><title>Auto start Virtualbox VM on boot</title><link>https://dmachard.github.io/posts/0015-virtualbox-vm-boot/</link><pubDate>Fri, 08 Feb 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0015-virtualbox-vm-boot/</guid><description>This post details how to start automatically a VM on boot.
Table of contents Guide Guide Create a shortcut.
Open virtualbox highlight the VM you want to startup click &amp;ldquo;Machine&amp;rdquo; -&amp;gt; &amp;ldquo;Create Shortcut on Desktop&amp;rdquo; Add to windows startup
Start -&amp;gt; Run type in &amp;ldquo;shell:startup&amp;rdquo; copy &amp;amp; paste shortcut in here.</description></item><item><title>Grafana installation with persistent volume</title><link>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</guid><description>This post details how to run grafana container with persistent volume
Table of contents Create volume Start Grafana Test Create volume Create a persistent volume for your data in /var/lib/grafana (database and plugins)
docker volume create grafana-storage Start grafana docker run -d -p 80:3000 --name=grafana --restart=always -v grafana-storage:/var/lib/grafana grafana/grafana Test http://yourip:80/
Default account:
login: admin password: admin</description></item><item><title>Guide installation de guacamole en mode container</title><link>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</guid><description>Guide d&amp;rsquo;installation de guacamole en mode container avec une base de donnée PostgreSQL.
Sommaire Prérequis Déploiment PostgreSQL Déploiment Guacamole Test de connexion Prérequis Ce tutorial nécessite un environnement docker et de récupérer les images dockers suivantes:
sudo docker pull postgres:9.4 sudo docker pull guacamole/guacd sudo docker pull guacamole/guacamole Déploiment PostgreSQL Démarrage container Pour avoir des données persistantes, prévoir un répertoire sur le système hôte.
mkdir -p /home/guacamole/postgresql_data cd /home/guacamole/postgresql_data sudo docker container run --name postgres01 -e POSTGRES_PASSWORD=bonjour -d -p 5432:5432 -v $PWD/postgresql_data:/var/lib/postgresql/data postgres ### Vérification des logs ```bash sudo docker logs postgres01 The files belonging to this database system will be owned by user &amp;#34;postgres&amp;#34;.</description></item><item><title>Connexion SSH par certificat</title><link>https://dmachard.github.io/posts/0026-ssh-certificate/</link><pubDate>Wed, 17 Oct 2018 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0026-ssh-certificate/</guid><description>Cet article détaille comment se connecter sur un système distant par certificat.
Génération clé # ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Created directory &amp;#39;/root/.ssh&amp;#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: c7:da:800:22:9e:a1:1f root@automation The key&amp;#39;s randomart image is: +--[ RSA 2048]----+ | | | .</description></item></channel></rss>