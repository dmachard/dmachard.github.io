<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pynic on My technical gists</title><link>https://dmachard.github.io/tags/pynic/</link><description>Recent content in pynic on My technical gists</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sun, 03 Mar 2019 00:00:00 +0100</lastBuildDate><atom:link href="https://dmachard.github.io/tags/pynic/index.xml" rel="self" type="application/rss+xml"/><item><title>Exemple de développement d'une API REST avec pycnic</title><link>https://dmachard.github.io/posts/0031-pycnic-api-python/</link><pubDate>Sun, 03 Mar 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0031-pycnic-api-python/</guid><description>Exemple de développement d&amp;rsquo;une API avec la librairie Python pycnic
Installation de la librarie
pip install pycnic Exemple simple d&amp;rsquo;une API serveur:
from pycnic.core import WSGI, Handler from pycnic.errors import HTTP_401, HTTP_400, HTTP_500, HTTP_403, HTTP_404 from wsgiref.simple_server import make_server, WSGIServer from SocketServer import ThreadingMixIn class HandlerCors(Handler): def options(self): return {} class HelloWorld(HandlerCors): def post(self): return { &amp;#34;msg&amp;#34;: &amp;#34;success&amp;#34; } class app(WSGI): headers = [ (&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;), (&amp;#34;Access-Control-Allow-Method&amp;#34;, &amp;#34;*&amp;#34;), (&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;content-type, authorization&amp;#34;), ] routes = [ (&amp;#39;/helloworld&amp;#39;, HelloWorld()) ] class ThreadingWSGIServer(ThreadingMixIn, WSGIServer): daemon_threads = True class Server: def __init__(self, wsgi_app, listen=&amp;#39;127.</description></item></channel></rss>