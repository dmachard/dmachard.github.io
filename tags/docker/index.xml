<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on My technical gists</title><link>https://dmachard.github.io/tags/docker/</link><description>Recent content in docker on My technical gists</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0100</lastBuildDate><atom:link href="https://dmachard.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>PowerDns/auth: how to run pdns-auth in a Docker Container with custom configuration file</title><link>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</guid><description>The pdns-auth product is available in the official dockerhub registry of PowerDNS. This post details how to execute pdns-auth in docker container, custom configuration file with sqlite3 database. We assume you have a containers environnement already available.
Table of contents Custom config Deploy container Persistent database Docker compose Create zone Enable DNS Update Custom config local-address=0.0.0.0 local-port=53 launch=gsqlite3 gsqlite3-database=/var/lib/powerdns/pdns.sqlite3 dnsupdate=yes enable-lua-records=yes Deploy container Deploy the dnsdist image with the custom configuration</description></item><item><title>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS</title><link>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</guid><description>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS
Table of contents Prerequisites Overview Prerequisites Your ansible inventory and hosts file should be like this:
cat /etc/hosts
$ cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.1.221 docker-manager01 192.168.1.222 docker-worker01 192.168.1.223 docker-worker02 cat inventory.ini
[swarm_managers] docker-manager01 [swarm_workers] docker-worker01 docker-worker02 [swarm:children] swarm_managers swarm_workers [glusterfs] docker-manager01 docker-worker01 docker-worker02 Overview The cluster consists of 3 servers:
1 manager 2 workers A distributed file system Installation Run the following playbooks</description></item><item><title>Run a squid proxy in container mode with custom configuration</title><link>https://dmachard.github.io/posts/0012-squid-run-docker/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0012-squid-run-docker/</guid><description>This tutorial explained how to deploy the following Squid 5 docker image and how to configure-it with a custom configuration (basic auth user).
Table of contents Setup user/password store Deploy the Squid container Test Basic configuration Setup user/password store yum install httpd-tools mkdir squid &amp;amp;&amp;amp; cd squid touch passwords htpasswd -c passwords [USERNAME] Replace [USERNAME] with your username. You will be prompted for entering the password. Enter and confirm it.</description></item><item><title>Build PowerDNS server with docker</title><link>https://dmachard.github.io/posts/0022-powerdns-build-docker/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0022-powerdns-build-docker/</guid><description>Table of contents Developer guide Developer guide clone the source code from powerdns repositories
git clone https://github.com/PowerDNS/pdns.git git clone https://github.com/PowerDNS/pdns-builder.git cp -rf pdns-builder /pdns/builder build with docker
cd pdns/ sudo docker build . --file Dockerfile-auth --no-cache -t dmachard/pdns-auth-dev prepare pdns config
mkdir pdns-dev touch pdns.conf add the following content to your config file
enable-lua-records=yes dnsupdate=yes loglevel=9 webserver=yes webserver-address=0.0.0.0 webserver-allow-from=0.0.0.0/0 webserver-password=hello webserver-port=8081 run the new pdns
sudo docker run -d -p 5354:53/udp -p 5354:53/tcp --name=powerdns-dev --volume=$PWD/pdns.</description></item><item><title>Freshrss installation guide in container mode</title><link>https://dmachard.github.io/posts/0029-freshrss-install-guide/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0029-freshrss-install-guide/</guid><description>This post details how to run freshrss container
Create volumes docker volume create freshrss-data docker volume create freshrss-extensions Start freshrss docker run -d --restart unless-stopped --log-opt max-size=10m -v freshrss-data:/var/www/FreshRSS/data -v freshrss-extensions:/var/www/FreshRSS/extensions -e &amp;#39;CRON_MIN=4,34&amp;#39; -e TZ=Europe/Paris -p 8080:80 --name freshrss freshrss/freshrss</description></item><item><title>Prometheus installation guide</title><link>https://dmachard.github.io/posts/0028-prometheus-install-guide/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0028-prometheus-install-guide/</guid><description>This post details how to run prometheus container
Configuration cat /var/prometheus/prometheus.yml global: scrape_interval: 5s evaluation_interval: 5s scrape_configs: - job_name: &amp;#39;dnstap_receiver&amp;#39; basic_auth: username: admin password: changeme static_configs: - targets: [&amp;#39;10.0.0.249:8082&amp;#39;] Start prometheus docker run -u root -d -p 9090:9090 -v /var/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml --restart=always --name promserver01 prom/prometheus Test The web interface is available at http://yourip:9090</description></item><item><title>Docker: debug sur container ne démarrant pas</title><link>https://dmachard.github.io/posts/0025-docker-container-debug-startup/</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0025-docker-container-debug-startup/</guid><description>Quelques commandes pour debugger un container qui ne démarre pas
How to Comment obtenir un shell dans un container?
docker exec -it &amp;lt;container_id&amp;gt; bash Comment debugguer sur container qui démarre pas? en modifiant le entrypoint par sh ce qui permet ensuite d&amp;rsquo;exécuter à la main le script ou programme posant problème.
docker run -it --name=&amp;lt;moncontainer&amp;gt; --entrypoint=sh &amp;lt;container_img&amp;gt; Comment afficher les logs d&amp;rsquo;un container?
docker logs --follow &amp;lt;container_id&amp;gt;</description></item><item><title>Installation d'un cluster docker swarm</title><link>https://dmachard.github.io/posts/0030-docker-swarm-installation/</link><pubDate>Sat, 09 Feb 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0030-docker-swarm-installation/</guid><description>Procédure pour installer un clusteur docker swarm sur 3 machines.
En prerequis, installer docker-ce sur l&amp;rsquo;ensemble des machines, le port tcp/2377 doit être ouvert.
sur le manager
docker swarm init --advertise-addr IP_MANAGER sur le worker
docker swarm join --token SWMTKN-1-1xgbk6rfab....k8048s IP_MANAGER:2377 sur manager ou worker
docker info sur un manager
docker node ls</description></item><item><title>Grafana installation with persistent volume</title><link>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</guid><description>This post details how to run grafana container with persistent volume
Table of contents Create volume Start Grafana Test Create volume Create a persistent volume for your data in /var/lib/grafana (database and plugins)
docker volume create grafana-storage Start grafana docker run -d -p 80:3000 --name=grafana --restart=always -v grafana-storage:/var/lib/grafana grafana/grafana Test http://yourip:80/
Default account:
login: admin password: admin</description></item><item><title>Guide installation de guacamole en mode container</title><link>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</guid><description>Guide d&amp;rsquo;installation de guacamole en mode container avec une base de donnée PostgreSQL.
Sommaire Prérequis Déploiment PostgreSQL Déploiment Guacamole Test de connexion Prérequis Ce tutorial nécessite un environnement docker et de récupérer les images dockers suivantes:
sudo docker pull postgres:9.4 sudo docker pull guacamole/guacd sudo docker pull guacamole/guacamole Déploiment PostgreSQL Démarrage container Pour avoir des données persistantes, prévoir un répertoire sur le système hôte.
mkdir -p /home/guacamole/postgresql_data cd /home/guacamole/postgresql_data sudo docker container run --name postgres01 -e POSTGRES_PASSWORD=bonjour -d -p 5432:5432 -v $PWD/postgresql_data:/var/lib/postgresql/data postgres ### Vérification des logs ```bash sudo docker logs postgres01 The files belonging to this database system will be owned by user &amp;#34;postgres&amp;#34;.</description></item></channel></rss>