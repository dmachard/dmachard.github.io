<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>installation on My technical gists</title><link>https://dmachard.github.io/tags/installation/</link><description>Recent content in installation on My technical gists</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0100</lastBuildDate><atom:link href="https://dmachard.github.io/tags/installation/index.xml" rel="self" type="application/rss+xml"/><item><title>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS</title><link>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0037-install-docker-swarm-persistant-storage/</guid><description>Install a Docker Swarm cluster with Persistent Storage Using GlusterFS
Table of contents Prerequisites Overview Prerequisites Your ansible inventory and hosts file should be like this:
cat /etc/hosts
$ cat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 192.168.1.221 docker-manager01 192.168.1.222 docker-worker01 192.168.1.223 docker-worker02 cat inventory.ini
[swarm_managers] docker-manager01 [swarm_workers] docker-worker01 docker-worker02 [swarm:children] swarm_managers swarm_workers [glusterfs] docker-manager01 docker-worker01 docker-worker02 Overview The cluster consists of 3 servers:
1 manager 2 workers A distributed file system Installation Run the following playbooks</description></item><item><title>How to install Ansible 4.7 on AlmaLinux 8.4 with pip</title><link>https://dmachard.github.io/posts/0013-ansible-almalinux-installation/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0013-ansible-almalinux-installation/</guid><description>This post will details how to install ansible on AlmaLinux 8.4.
Table of contents Install Python Install Ansible Install Python Install Python 3.9
dnf install epel-release -y dnf install python39 sshpass Install Ansible Install Ansible 4.7.0
Install some python dependencies
pip3 install --upgrade pip Finally install Ansible
python3 -m pip install ansible Checking version
# ansible --version ansible [core 2.11.6] config file = None configured module search path = [&amp;#39;/root/.ansible/plugins/modules&amp;#39;, &amp;#39;/usr/share/ansible/plugins/modules&amp;#39;] ansible python module location = /usr/local/lib/python3.</description></item><item><title>DnsCollector/dnstap: installation guide from binary</title><link>https://dmachard.github.io/posts/0007-dnscollector-install-binary/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0007-dnscollector-install-binary/</guid><description>This post details how to install the go-dnscollector tool with systemd.
Table of contents Installation Certificate Configuration Start Installation Install go-dnscollector from binary
Create some folders and user
adduser -M dnscollector mkdir /etc/dnscollector/ mkdir /var/run/dnscollector/ Export the following variable to get the version you want to download
export DNSCOLLECTOR_VERSION=v0.10.0 Download the binary
wget https://github.com/dmachard/go-dnscollector/releases/download/$(echo $DNSCOLLECTOR_VERSION)/go-dnscollector_$(echo $DNSCOLLECTOR_VERSION)_linux_amd64.tar.gz tar xvf go-dnscollector_$(echo $DNSCOLLECTOR_VERSION)_linux_amd64.tar.gz mv go-dnscollector /usr/bin/ mv config.yml /etc/dnscollector/config.yml.default Certificate Create a certificate. In this example we used a self-signed cert.</description></item><item><title>Grafana installation with persistent volume</title><link>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0027-grafana-installation-volume-persistent/</guid><description>This post details how to run grafana container with persistent volume
Table of contents Create volume Start Grafana Test Create volume Create a persistent volume for your data in /var/lib/grafana (database and plugins)
docker volume create grafana-storage Start grafana docker run -d -p 80:3000 --name=grafana --restart=always -v grafana-storage:/var/lib/grafana grafana/grafana Test http://yourip:80/
Default account:
login: admin password: admin</description></item><item><title>Guide installation de guacamole en mode container</title><link>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</link><pubDate>Tue, 29 Jan 2019 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0024-guacamole-docker-installation/</guid><description>Guide d&amp;rsquo;installation de guacamole en mode container avec une base de donnée PostgreSQL.
Sommaire Prérequis Déploiment PostgreSQL Déploiment Guacamole Test de connexion Prérequis Ce tutorial nécessite un environnement docker et de récupérer les images dockers suivantes:
sudo docker pull postgres:9.4 sudo docker pull guacamole/guacd sudo docker pull guacamole/guacamole Déploiment PostgreSQL Démarrage container Pour avoir des données persistantes, prévoir un répertoire sur le système hôte.
mkdir -p /home/guacamole/postgresql_data cd /home/guacamole/postgresql_data sudo docker container run --name postgres01 -e POSTGRES_PASSWORD=bonjour -d -p 5432:5432 -v $PWD/postgresql_data:/var/lib/postgresql/data postgres ### Vérification des logs ```bash sudo docker logs postgres01 The files belonging to this database system will be owned by user &amp;#34;postgres&amp;#34;.</description></item></channel></rss>