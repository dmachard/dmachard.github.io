<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dns on My technical gists</title><link>https://dmachard.github.io/tags/dns/</link><description>Recent content in dns on My technical gists</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 28 Aug 2023 00:00:00 +0100</lastBuildDate><atom:link href="https://dmachard.github.io/tags/dns/index.xml" rel="self" type="application/rss+xml"/><item><title>CoreDNS: secure your DNSTAP streams with TLS</title><link>https://dmachard.github.io/posts/0053-coredns-dnstap-tls/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0053-coredns-dnstap-tls/</guid><description>This post explains how to enable TLS on outgoing dnstap streams with CoreDNS. Please refer to How to enable it on main dns servers to enable DNStap in basic way.
TLS is supported since the version 1.11
Enable Secure DNSTAP with CoreDNS Create working folder
mkdir securednstap cd securednstap Create the following config_coredns.conf in your working folder.
tls:// to use TLS 192.168.1.200:6000 is the IP/port address of your DNStap collector. skipverify: this setting ignore TLS verification, do not use this settings in production.</description></item><item><title>PowerDNS DNSdist: blacklist IP addresses with DNS UPDATE control and dynamic blocking duration</title><link>https://dmachard.github.io/posts/0052-dnsdist-ip-blacklisting/</link><pubDate>Thu, 17 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0052-dnsdist-ip-blacklisting/</guid><description>A DNSdist configuration example to blacklist IP addresses with DNS UPDATE control and dynamic blocking duration. This example is volatible, dnsdist will restart with an empty blocklist of IP addresses.
dnsdist 1.8 minimum is required for this example.
DNSdist configuration In the following example, DNSdist will forward all incoming queries to 1.1.1.1 by default. Before that, two actions are defined
the first one to intercept all DNS update to blockip.local.dev. the second one to blacklist IP in limited time.</description></item><item><title>PowerDNS DNSdist: temporarily block domains with DNS notify</title><link>https://dmachard.github.io/posts/0051-dnsdist-blocklist-domains/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0051-dnsdist-blocklist-domains/</guid><description>A DNSdist configuration example to block or unblock domains temporarily and in a dynamic way with DNS notify. This example is volatible, a restart of the dnsdist will erase the blocklist. If you want to keep the blocklist even after restart, you can refer to the post blackhole/spoofing domains with external files
DNSdist configuration In the following example, DNSdist will forward all incoming queries to 1.1.1.1 by default. Before that, an action is defined to check if the domain must be refused or not.</description></item><item><title>PowerDNS DNSdist: dns tunneling protection</title><link>https://dmachard.github.io/posts/0048-dnsdist-dns-tunneling-protection/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0048-dnsdist-dns-tunneling-protection/</guid><description>A DNSdist configuration example to attempt to block DNS tunnelling.
The global approach is to blacklist IP when some malicious behaviour are detected:
Uncommon DNS Qtype like NULL, PRIVATE are blocked A generic regex to block long successive DNS label with whitelist to avoid false-positive Apply some rate limitations per IP The latest version of the configuration can be downloaded from github.
-- Generic rules to block malicious dns traffic like DNS tunneling -- remote security events logger based on dnstap security_dnstap_logger = newFrameStreamTcpLogger(&amp;#34;10.</description></item><item><title>PowerDNS DNSdist: echo capability of ip address from domain name for development</title><link>https://dmachard.github.io/posts/0049-dnsdist-echoip/</link><pubDate>Sat, 22 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0049-dnsdist-echoip/</guid><description>A DNSdist configuration example to map any IP address to a hostname for development purpose. The following formats are supported:
10.0.0.1.local.dev will return A record as A 10.0.0.1 192-168-1-250.local.dev will return A record as A 192.168.1.250 app.10.8.0.1.local.dev will return A record as A 10.8.0.1 app-116-203-255-68.local.dev will return A record as A 116.203.255.68 customer1.app.10.0.0.1.local.dev will return A record as A 10.0.0.1 customer-app1-127-0-0-1.local.dev will return A record as A 127.0.0.1 0a000803.local.dev will return A record as A 10.</description></item><item><title>DNS Tunneling: tools overview</title><link>https://dmachard.github.io/posts/0047-dns-tunneling-overview/</link><pubDate>Tue, 04 Jul 2023 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0047-dns-tunneling-overview/</guid><description>This post is an overview of some dns tunnneling tools with installation procedure.
Table of contents What is DNS tunneling? Tools overview iodine dnscat2 dns2tcp DNSExfiltrator Sods Other tools What is DNS tunneling? DNS tunneling exploits DNS protocol for tunneling data via DNS query and response packet.
It can be used to extract or import data silently from a corporate network.
Tools overview Iodine Tunnel IPv4 data over DNS
Github URL: https://github.</description></item><item><title>PowerDns/auth: how to run pdns-auth in a Docker Container with custom configuration file</title><link>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0010-powerdns-dnsdist-docker/</guid><description>The pdns-auth product is available in the official dockerhub registry of PowerDNS. This post details how to execute pdns-auth in docker container, custom configuration file with sqlite3 database. We assume you have a containers environnement already available.
Table of contents Custom config Deploy container Persistent database Docker compose Create zone Enable DNS Update Custom config local-address=0.0.0.0 local-port=53 launch=gsqlite3 gsqlite3-database=/var/lib/powerdns/pdns.sqlite3 dnsupdate=yes enable-lua-records=yes Deploy container Deploy the dnsdist image with the custom configuration</description></item><item><title>Prometheus: monitor dns records with blackbox exporter</title><link>https://dmachard.github.io/posts/0043-blackbox-prometheus-dns/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0043-blackbox-prometheus-dns/</guid><description>Example to monitor DNS records with the blackbox exporter
Table of contents Blackbox Prometheus Grafana Blackbox Configuration blackbox.yml
modules: www.google.com: prober: dns timeout: 5s dns: transport_protocol: &amp;#34;udp&amp;#34; preferred_ip_protocol: &amp;#34;ip4&amp;#34; query_name: &amp;#34;www.google.com&amp;#34; query_type: &amp;#34;A&amp;#34; valid_rcodes: - NOERROR www.microsoft.com: prober: dns timeout: 5s dns: transport_protocol: &amp;#34;udp&amp;#34; preferred_ip_protocol: &amp;#34;ip4&amp;#34; query_name: &amp;#34;www.microsoft.com&amp;#34; query_type: &amp;#34;A&amp;#34; valid_rcodes: - NOERROR Reload the blackbox config
curl -X POST http://&amp;lt;ip_blackbox&amp;gt;:9115/-/reload Prometheus - job_name: &amp;#39;blackbox-dns-monitor&amp;#39; scrape_interval: 5s metrics_path: /probe relabel_configs: # Populate domain label with domain portion of __address__ - source_labels: [__address__] regex: (.</description></item><item><title>PowerDns/dnsdist: route incoming UDP/TCP DNS queries to a pool of DoH servers</title><link>https://dmachard.github.io/posts/0011-powerdns-dnsdist-doh-servers/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0011-powerdns-dnsdist-doh-servers/</guid><description>The goal of this tutorial is to send all your local DNS queries (udp/tcp) to a pool of DoH public resolvers with dnsdist load balancer. A dns cache is also enabled to optimize the traffic. We also assume you have a docker environement to follow this tutorial.
Table of contents Prepare configuration Deploy dnsdist container Test DNS resolution Jinja configuration template Prepare configuration Before to start, install some useful python tools to prepare the configuration</description></item><item><title>PowerDns/dnsdist: how to send all your DNS queries to a pool of public resolvers</title><link>https://dmachard.github.io/posts/0009-powerdns-dnsdist-pool-resolvers/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0009-powerdns-dnsdist-pool-resolvers/</guid><description>In this very basic example, the goal is to send all your local DNS queries (udp/tcp) to a pool of public resolvers (without encryption).
Table of contents Basic configuration Basic configuration dnsdist is configured to make a load balancing (round robin) between all public resolvers configured. A dns cache is enabled to optimize the traffic. We assume you have dnsdist 1.6 minimum installed on your machine.
Configuration: /etc/dnsdist/dnsdist.conf
--------------------------------------------------- -- Dns services --------------------------------------------------- -- udp/tcp dns listening setLocal(&amp;#34;0.</description></item><item><title>PowerDNS/dnsdist: how to configure TLS for outgoing dnstap stream using stunnel</title><link>https://dmachard.github.io/posts/0006-powerdns-dnsdist-dnstap-tls/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0006-powerdns-dnsdist-dnstap-tls/</guid><description>This post will detail how to wrap your outgoing dnstap stream with TLS using stunnel.
Table of contents Introduction Installation Configuration Systemd Introduction This tutorial assumes you have a working PowerDNS dnsdist server installed on a Centos/AlmaLinux with dnstap enabled. Also we will use the same user/group that dnsdist for stunnel. Any feedbacks will be appreciated to improve this tutorial.
Installation Install stunnel
yum install stunnel mkdir /var/run/stunnel chown dnsdist:dnsdist /var/run/stunnel Configuration Configure stunnel</description></item><item><title>PowerDNS/dnsdist: how to configure TLS for the API using stunnel</title><link>https://dmachard.github.io/posts/0005-powerdns-dnsdist-api-tls/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0005-powerdns-dnsdist-api-tls/</guid><description>This post will detail how to wrap your DnsDIST webserver/API and dnstap stream with TLS using stunnel.
Table of contents Purpose Installation Configuration Systemd Purpose This tutorial assumes you have a working PowerDNS dnsdist server installed on a Centos/AlmaLinux with webserver api. Also we will use the same user/group that dnsdist for stunnel. Any feedbacks will be appreciated to improve this tutorial.
Installation Install stunnel
yum install stunnel mkdir /var/run/stunnel chown dnsdist:dnsdist /var/run/stunnel Configuration Create a certificate.</description></item><item><title>Build PowerDNS server with docker</title><link>https://dmachard.github.io/posts/0022-powerdns-build-docker/</link><pubDate>Thu, 24 Jun 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0022-powerdns-build-docker/</guid><description>Table of contents Developer guide Developer guide clone the source code from powerdns repositories
git clone https://github.com/PowerDNS/pdns.git git clone https://github.com/PowerDNS/pdns-builder.git cp -rf pdns-builder /pdns/builder build with docker
cd pdns/ sudo docker build . --file Dockerfile-auth --no-cache -t dmachard/pdns-auth-dev prepare pdns config
mkdir pdns-dev touch pdns.conf add the following content to your config file
enable-lua-records=yes dnsupdate=yes loglevel=9 webserver=yes webserver-address=0.0.0.0 webserver-allow-from=0.0.0.0/0 webserver-password=hello webserver-port=8081 run the new pdns
sudo docker run -d -p 5354:53/udp -p 5354:53/tcp --name=powerdns-dev --volume=$PWD/pdns.</description></item><item><title>PowerDNS/auth: how to manage DNS records with dynamic updates and terraform</title><link>https://dmachard.github.io/posts/0004-powerdns-dns-records-terraform/</link><pubDate>Sat, 22 May 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0004-powerdns-dns-records-terraform/</guid><description>This post details how to manage DNS records with dynamic updates and terraform with your authoritative server.
Table of contents Requirements Provider configuration Create DNS record Requirements Enable DNS update to your pdns.conf
dnsupdate=yes Create a Tsig key and set metadata to your zone to authorize DNSUPDATE and AXFR with TSIG authentication.
TSIG-ALLOW-DNSUPDATE TSIG-ALLOW-AXFR Provider configuration Create a main.tf file
Install the provider &amp;ldquo;dns&amp;rdquo; then, run terraform init.
terraform { required_providers { dns = { source = &amp;#34;hashicorp/dns&amp;#34; version = &amp;#34;3.</description></item><item><title>PowerDNS/auth: how to manage LUA records with terraform</title><link>https://dmachard.github.io/posts/0003-powerdns-lua-records-terraform/</link><pubDate>Sat, 22 May 2021 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0003-powerdns-lua-records-terraform/</guid><description>This post details how to manage LUA records with dynamic updates and terraform with your authoritative server.
Table of contents Requirements Provider configuration Create custom LUA record Create pre-configured record Requirements Enable LUA records and DNS update to your pdns.conf
enable-lua-records=yes dnsupdate=yes Create a Tsig key and set metadata to your zone to authorize DNSUPDATE and AXFR with TSIG authentication.
TSIG-ALLOW-DNSUPDATE TSIG-ALLOW-AXFR Provider configuration The documentation of the provider powerdns-gslb is available in the terraform registry</description></item><item><title>Authoritary PowerDNS installation on CentOS</title><link>https://dmachard.github.io/posts/0018-powerdns-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0018-powerdns-installation/</guid><description>PowerDNS authoritary servers installation on *CentOS 7 with sqlite database
Table of contents Installation Configuration Start server Manage configuration Cache purge entries DNS-UPDATE (RFC2136) GSLB feature Play with REST API Installation wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install epel-release yum --enablerepo=epel install luajit libsodium yum --enablerepo=epel install jq curl -o /etc/yum.repos.d/powerdns-auth-42.repo https://repo.powerdns.com/repo-files/centos-auth-42.repo yum install pdns pdns-tools pdns-backend-sqlite wget https://raw.githubusercontent.com/PowerDNS/pdns/master/modules/gsqlite3backend/schema.sqlite3.sql mkdir /var/db/pdns sqlite3 /var/db/pdns/pdns.db .read schema.sqlite3.sql .quit chown -R pdns:pdns /var/db/pdns Configuration vim /etc/pdns/pdns.</description></item><item><title>PowerDNS/dnsdist: installation guide on CentOS 7</title><link>https://dmachard.github.io/posts/0020-powerdns-dnsdist-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0020-powerdns-dnsdist-installation/</guid><description>Table of contents Installation Configuration Start Firewalld configuration Installation Activate EPEL repo
yum install -y epel-release Install dependencies
yum install re2 net-snmp.x86_64 lmdb.x86_64 fstrm.x86_64 yum install protobuf.x86_64 tinycdb.x86_64 libsodium.x86_64 luajit.x86_64 openssl yum install gnutls tinycdb Download from the last version available https://repo.powerdns.com/centos/x86_64/7/
rpm -ivh dnsdist-1.4.0-1pdns.el7.rpm Configuration vim /etc/dnsdist/dnsdist.conf
-- bind on ip any setLocal(&amp;#39;0.0.0.0:53&amp;#39;) -- allow all IP access setACL({&amp;#39;0.0.0.0/0&amp;#39;}) -- start the web server on port 8080 webserver(&amp;#34;0.0.0.0:8080&amp;#34;, &amp;#34;key&amp;#34;) -- disable security feature polling setSecurityPollSuffix(&amp;#39;&amp;#39;) -- log incoming request addAction(AllRule(), LogAction(&amp;#34;/var/log/dnsdist.</description></item><item><title>Recursor PowerDNS installation on CentOS</title><link>https://dmachard.github.io/posts/0019-powerdns-rec-installation/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0019-powerdns-rec-installation/</guid><description>PowerDNS recursor servers installation on CentOS.
Table of contents Installation Configuration Start server Cache purge entries Installation wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum -y install epel-release yum --enablerepo=epel install luajit libsodium yum --enablerepo=epel install jq curl -o /etc/yum.repos.d/powerdns-rec-43.repo https://repo.powerdns.com/repo-files/centos-rec-43.repo yum install pdns-recursor pdns-tools Configuration Recursor server configuration
/etc/pdns-recursor/recursor.conf local-address=0.0.0.0 local-port=53 security-poll-suffix= forward-zones=home.local=127.0.0.1:5300 forward-zones-recurse=.=10.0.0.140:53 Start server systemctl enable pdns-recursor.service systemctl start pdns-recursor.service Cache purge entries rec_control wipe-cache test1.home.local</description></item><item><title>How to enable and use the DNSTAP protocol on main dns servers</title><link>https://dmachard.github.io/posts/0001-dnstap-testing/</link><pubDate>Sat, 23 May 2020 00:00:00 +0100</pubDate><guid>https://dmachard.github.io/posts/0001-dnstap-testing/</guid><description>This post details how to enable the dnstap feature in main open source dns servers.</description></item></channel></rss>